{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport API from \"../API\";\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [state, setState] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (search = \"\", page) => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(search, page);\n      setState(prev => ({ ...movies,\n        result: movies.page > 1 ? [...prev.results, movies.results] : movies.results\n      }));\n    } catch {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; // Initial render\n\n\n  useEffect(() => {\n    console.log(\"Mounted\");\n    fetchMovies(\"\", 1);\n  }, []);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useHomeFetch, \"/YnvvaV0tprPxXgjnSDjNMwznNs=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/hooks/useHomeFetch.js"],"names":["React","useState","useEffect","API","initialState","page","results","total_pages","total_results","useHomeFetch","state","setState","loading","setLoading","error","setError","fetchMovies","search","movies","prev","result","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,WAAW,EAAE,CAHM;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMe,WAAW,GAAG,OAAOC,MAAM,GAAG,EAAhB,EAAoBZ,IAApB,KAA6B;AAC/C,QAAI;AACFU,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMK,MAAM,GAAG,MAAMf,GAAG,CAACa,WAAJ,CAAgBC,MAAhB,EAAwBZ,IAAxB,CAArB;AACAM,MAAAA,QAAQ,CAAEQ,IAAD,KAAW,EAClB,GAAGD,MADe;AAElBE,QAAAA,MAAM,EACJF,MAAM,CAACb,IAAP,GAAc,CAAd,GAAkB,CAAC,GAAGc,IAAI,CAACb,OAAT,EAAkBY,MAAM,CAACZ,OAAzB,CAAlB,GAAsDY,MAAM,CAACZ;AAH7C,OAAX,CAAD,CAAR;AAKD,KATD,CASE,MAAM;AACNS,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAdD,CALgC,CAqBhC;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAN,IAAAA,WAAW,CAAC,EAAD,EAAK,CAAL,CAAX;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO;AAAEN,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACD,CA5BM;;GAAML,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport API from \"../API\";\n\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0,\n};\n\nexport const useHomeFetch = () => {\n  const [state, setState] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (search = \"\", page) => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(search, page);\n      setState((prev) => ({\n        ...movies,\n        result:\n          movies.page > 1 ? [...prev.results, movies.results] : movies.results,\n      }));\n    } catch {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  // Initial render\n  useEffect(() => {\n    console.log(\"Mounted\");\n    fetchMovies(\"\", 1);\n  }, []);\n\n  return { state, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}