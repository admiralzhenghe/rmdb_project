{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // Component\n\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Credits = ({\n  person,\n  personId\n}) => {\n  _s();\n\n  const {\n    state: credits,\n    loading\n  } = usePersonCreditsFetch(personId);\n  const [showing, setShowing] = useState();\n  let jobs;\n\n  if (!loading && credits) {\n    let keys = Object.keys(credits); // Only show select options for previously held jobs\n\n    jobs = keys.filter(key => credits[key].length > 0); // Sort jobs by the most number of credits\n  }\n\n  const handleSelect = job => {\n    setShowing(job);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [!loading &&\n      /*#__PURE__*/\n      // <div className=\"job-type\">\n      //   <div>\n      //     FILMS{\" \"}\n      //     {showing === \"actor\"\n      //       ? \"STARRING\"\n      //       : showing === \"director\"\n      //       ? \"DIRECTED BY\"\n      //       : showing === \"producer\"\n      //       ? \"PRODUCED BY\"\n      //       : \"WRITTEN BY\"}\n      //   </div>\n      //   <div className=\"name\">{person.name}</div>\n      // </div>\n      _jsxDEV(Dropdown, {\n        credits: credits,\n        jobs: jobs,\n        handleSelect: handleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), showing && /*#__PURE__*/_jsxDEV(CreditsGrid, {\n        showing: credits[showing]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Credits, \"21LvT8nN9DrsISgqGAig3F2a7tA=\", false, function () {\n  return [usePersonCreditsFetch];\n});\n\n_c = Credits;\nexport default Credits;\n\nvar _c;\n\n$RefreshReg$(_c, \"Credits\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js"],"names":["React","CreditsGrid","Content","Wrapper","usePersonCreditsFetch","useState","Dropdown","Credits","person","personId","state","credits","loading","showing","setShowing","jobs","keys","Object","filter","key","length","handleSelect","job"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAAA;;AACxC,QAAM;AAAEC,IAAAA,KAAK,EAAEC,OAAT;AAAkBC,IAAAA;AAAlB,MAA8BR,qBAAqB,CAACK,QAAD,CAAzD;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AAEA,MAAIU,IAAJ;;AACA,MAAI,CAACH,OAAD,IAAYD,OAAhB,EAAyB;AACvB,QAAIK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYL,OAAZ,CAAX,CADuB,CAEvB;;AACAI,IAAAA,IAAI,GAAGC,IAAI,CAACE,MAAL,CAAaC,GAAD,IAASR,OAAO,CAACQ,GAAD,CAAP,CAAaC,MAAb,GAAsB,CAA3C,CAAP,CAHuB,CAIvB;AACD;;AAED,QAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5BR,IAAAA,UAAU,CAACQ,GAAD,CAAV;AACD,GAFD;;AAIA,sBACE,QAAC,OAAD;AAAA,2BACE,QAAC,OAAD;AAAA,iBACG,CAACV,OAAD;AAAA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAC,QAAD;AAAU,QAAA,OAAO,EAAED,OAAnB;AAA4B,QAAA,IAAI,EAAEI,IAAlC;AAAwC,QAAA,YAAY,EAAEM;AAAtD;AAAA;AAAA;AAAA;AAAA,cAfJ,EAmBGR,OAAO,iBAAI,QAAC,WAAD;AAAa,QAAA,OAAO,EAAEF,OAAO,CAACE,OAAD;AAA7B;AAAA;AAAA;AAAA;AAAA,cAnBd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAzCD;;GAAMN,O;UACgCH,qB;;;KADhCG,O;AA2CN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\n// Component\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\n\nconst Credits = ({ person, personId }) => {\n  const { state: credits, loading } = usePersonCreditsFetch(personId);\n  const [showing, setShowing] = useState();\n\n  let jobs;\n  if (!loading && credits) {\n    let keys = Object.keys(credits);\n    // Only show select options for previously held jobs\n    jobs = keys.filter((key) => credits[key].length > 0);\n    // Sort jobs by the most number of credits\n  }\n\n  const handleSelect = (job) => {\n    setShowing(job);\n  };\n\n  return (\n    <Wrapper>\n      <Content>\n        {!loading && (\n          // <div className=\"job-type\">\n          //   <div>\n          //     FILMS{\" \"}\n          //     {showing === \"actor\"\n          //       ? \"STARRING\"\n          //       : showing === \"director\"\n          //       ? \"DIRECTED BY\"\n          //       : showing === \"producer\"\n          //       ? \"PRODUCED BY\"\n          //       : \"WRITTEN BY\"}\n          //   </div>\n          //   <div className=\"name\">{person.name}</div>\n          // </div>\n          <Dropdown credits={credits} jobs={jobs} handleSelect={handleSelect} />\n        )}\n        {/* {!loading && ( */}\n        {/* )} */}\n        {showing && <CreditsGrid showing={credits[showing]} />}\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Credits;\n"]},"metadata":{},"sourceType":"module"}