{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/rmdb/src/components/Search/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport searchIcon from \"../../images/search-icon.svg\";\nimport { Wrapper, Content } from \"./Search.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  setSearchTerm\n}) => {\n  _s();\n\n  const [state, setState] = useState(\"dip\"); // Prevent useEffect from triggering useHomeFetch when component mounts\n\n  const initial = useRef(true);\n  useEffect(() => {\n    // Skip initial render\n    // if (initial.current) {\n    // initial.current = false;\n    // return;\n    // }\n    // Delay search\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: searchIcon,\n        alt: \"search-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: state,\n        onChange: e => {\n          setState(e.target.value);\n        },\n        placeholder: \"Search Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"D2LxXbgN2Ywc26Hxi0dw8r0Zmcw=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/components/Search/Search.js"],"names":["React","useState","useEffect","useRef","useReducer","Wrapper","Content","Search","setSearchTerm","state","setState","initial","timer","setTimeout","clearTimeout","searchIcon","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC,CADoC,CAEpC;;AACA,QAAMU,OAAO,GAAGR,MAAM,CAAC,IAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AAEA;AACA,UAAMU,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BL,MAAAA,aAAa,CAACC,KAAD,CAAb;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAMK,YAAY,CAACF,KAAD,CAAzB;AACD,GAbQ,EAaN,CAACJ,aAAD,EAAgBC,KAAhB,CAbM,CAAT;AAeA,sBACE,QAAC,OAAD;AAAA,2BACE,QAAC,OAAD;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEM,UAAV;AAAsB,QAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEN,KAFT;AAGE,QAAA,QAAQ,EAAGO,CAAD,IAAO;AACfN,UAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,SALH;AAME,QAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnCD;;GAAMX,M;;KAAAA,M;AAqCN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport searchIcon from \"../../images/search-icon.svg\";\nimport { Wrapper, Content } from \"./Search.styles\";\n\nconst Search = ({ setSearchTerm }) => {\n  const [state, setState] = useState(\"dip\");\n  // Prevent useEffect from triggering useHomeFetch when component mounts\n  const initial = useRef(true);\n\n  useEffect(() => {\n    // Skip initial render\n    // if (initial.current) {\n    // initial.current = false;\n    // return;\n    // }\n\n    // Delay search\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n\n  return (\n    <Wrapper>\n      <Content>\n        <img src={searchIcon} alt=\"search-icon\" />\n        <input\n          type=\"text\"\n          value={state}\n          onChange={(e) => {\n            setState(e.target.value);\n          }}\n          placeholder=\"Search Movie\"\n        />\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}