{"ast":null,"code":"var _s = $RefreshSig$();\n\n// API\nimport API from \"../API\"; // Hook\n\nimport { useState, useEffect } from \"react\";\nexport const usePersonCreditFetch = personId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setError(false);\n        setLoading(true);\n        const credits = API.fetchCredits(personId);\n        setState({ ...credits\n        });\n      } catch {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [personId]);\n  return {\n    state,\n    error,\n    loading\n  };\n};\n\n_s(usePersonCreditFetch, \"+OvlRV4Vv7PTnaV8pBvWy5zazE8=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/hooks/useCreditFetch.js"],"names":["API","useState","useEffect","usePersonCreditFetch","personId","state","setState","error","setError","loading","setLoading","fetchData","credits","fetchCredits"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,oBAAoB,GAAIC,QAAD,IAAc;AAAA;;AAChD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFH,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAME,OAAO,GAAGZ,GAAG,CAACa,YAAJ,CAAiBT,QAAjB,CAAhB;AACAE,QAAAA,QAAQ,CAAC,EAAE,GAAGM;AAAL,SAAD,CAAR;AACD,OALD,CAKE,MAAM;AACNJ,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;;AAWAC,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACP,QAAD,CAbM,CAAT;AAcA,SAAO;AAAEC,IAAAA,KAAF;AAASE,IAAAA,KAAT;AAAgBE,IAAAA;AAAhB,GAAP;AACD,CApBM;;GAAMN,oB","sourcesContent":["// API\nimport API from \"../API\";\n// Hook\nimport { useState, useEffect } from \"react\";\n\nexport const usePersonCreditFetch = (personId) => {\n  const [state, setState] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setError(false);\n        setLoading(true);\n        const credits = API.fetchCredits(personId);\n        setState({ ...credits });\n      } catch {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [personId]);\n  return { state, error, loading };\n};\n"]},"metadata":{},"sourceType":"module"}