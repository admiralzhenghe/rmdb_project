{"ast":null,"code":"var _s = $RefreshSig$();\n\n// API\nimport API from \"../API\"; // Hook\n\nimport { useState, useEffect } from \"react\";\nexport const usePersonFetch = personId => {\n  _s();\n\n  const [person, setPerson] = useState({});\n  const [credits, setCredits] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  console.log(\"at the top\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        console.log(\"setload personfetch\");\n        setError(false); // Fetch the person's bio\n\n        console.log(actor, \"here\");\n        const person = await API.fetchPerson(personId);\n        console.log(\"1\"); // Fetch the person's movie credits\n\n        const credits = await API.fetchPersonCredits(personId);\n        console.log(\"2\");\n        const actor = credits.cast;\n        const director = credits.crew.filter(movie => movie.job === \"Director\");\n        const producer = credits.crew.filter(movie => movie.job === \"Producer\");\n        const writer = credits.crew.filter(movie => movie.job === \"Writer\");\n        setPerson({ ...person\n        });\n        setCredits({\n          actor,\n          director,\n          producer,\n          writer\n        });\n        console.log(\"try done\", person, credits);\n      } catch (error) {\n        setError(true);\n      } finally {\n        console.log(\"setloading false\");\n        setLoading(false);\n      }\n    };\n\n    console.log(\"out here\");\n    fetchData();\n  }, [personId]);\n  console.log(loading, \"person fetch return\", person, credits);\n  return [person, credits, loading, error];\n};\n\n_s(usePersonFetch, \"k8nRx3f0vp6v/v4FP7enc07t2j0=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/hooks/usePersonFetch.js"],"names":["API","useState","useEffect","usePersonFetch","personId","person","setPerson","credits","setCredits","loading","setLoading","error","setError","console","log","fetchData","actor","fetchPerson","fetchPersonCredits","cast","director","crew","filter","movie","job","producer","writer"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAc;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFL,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAF,QAAAA,QAAQ,CAAC,KAAD,CAAR,CAHE,CAIF;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,EAAmB,MAAnB;AACA,cAAMX,MAAM,GAAG,MAAML,GAAG,CAACiB,WAAJ,CAAgBb,QAAhB,CAArB;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAPE,CAQF;;AACA,cAAMP,OAAO,GAAG,MAAMP,GAAG,CAACkB,kBAAJ,CAAuBd,QAAvB,CAAtB;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,cAAME,KAAK,GAAGT,OAAO,CAACY,IAAtB;AACA,cAAMC,QAAQ,GAAGb,OAAO,CAACc,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAMC,QAAQ,GAAGlB,OAAO,CAACc,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAME,MAAM,GAAGnB,OAAO,CAACc,IAAR,CAAaC,MAAb,CAAqBC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,QAA7C,CAAf;AAEAlB,QAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,SAAD,CAAT;AACAG,QAAAA,UAAU,CAAC;AAAEQ,UAAAA,KAAF;AAASI,UAAAA,QAAT;AAAmBK,UAAAA,QAAnB;AAA6BC,UAAAA;AAA7B,SAAD,CAAV;AAEAb,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBT,MAAxB,EAAgCE,OAAhC;AACD,OAxBD,CAwBE,OAAOI,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OA1BD,SA0BU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAJ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KA/BD;;AAgCAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAC,IAAAA,SAAS;AACV,GAnCQ,EAmCN,CAACX,QAAD,CAnCM,CAAT;AAqCAS,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqB,qBAArB,EAA4CJ,MAA5C,EAAoDE,OAApD;AACA,SAAO,CAACF,MAAD,EAASE,OAAT,EAAkBE,OAAlB,EAA2BE,KAA3B,CAAP;AACD,CA7CM;;GAAMR,c","sourcesContent":["// API\nimport API from \"../API\";\n// Hook\nimport { useState, useEffect } from \"react\";\n\nexport const usePersonFetch = (personId) => {\n  const [person, setPerson] = useState({});\n  const [credits, setCredits] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  console.log(\"at the top\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        console.log(\"setload personfetch\");\n        setError(false);\n        // Fetch the person's bio\n        console.log(actor, \"here\");\n        const person = await API.fetchPerson(personId);\n        console.log(\"1\");\n        // Fetch the person's movie credits\n        const credits = await API.fetchPersonCredits(personId);\n        console.log(\"2\");\n        const actor = credits.cast;\n        const director = credits.crew.filter(\n          (movie) => movie.job === \"Director\"\n        );\n        const producer = credits.crew.filter(\n          (movie) => movie.job === \"Producer\"\n        );\n        const writer = credits.crew.filter((movie) => movie.job === \"Writer\");\n\n        setPerson({ ...person });\n        setCredits({ actor, director, producer, writer });\n\n        console.log(\"try done\", person, credits);\n      } catch (error) {\n        setError(true);\n      } finally {\n        console.log(\"setloading false\");\n        setLoading(false);\n      }\n    };\n    console.log(\"out here\");\n    fetchData();\n  }, [personId]);\n\n  console.log(loading, \"person fetch return\", person, credits);\n  return [person, credits, loading, error];\n};\n"]},"metadata":{},"sourceType":"module"}