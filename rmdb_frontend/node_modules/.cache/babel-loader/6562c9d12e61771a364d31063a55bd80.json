{"ast":null,"code":"import { SEARCH_BASE_URL, POPULAR_BASE_URL, API_URL, API_KEY, REQUEST_TOKEN_URL, LOGIN_URL, SESSION_ID_URL } from \"./config\";\nconst defaultConfig = {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n};\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}` : `${POPULAR_BASE_URL}&page=${page}`; // return await (await fetch(endpoint)).json();\n\n    const response = await fetch(endpoint);\n    const data = await response.json();\n    return data;\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    }; // First authenticate the requestToken\n\n    const data = await (await fetch(LOGIN_URL, { ...defaultConfig,\n      body: JSON.stringify(bodyData)\n    })).json(); // Then get the sessionId with the requestToken\n\n    if (data.success) {\n      const sessionId = await (await fetch(SESSION_ID_URL, { ...defaultConfig,\n        body: JSON.stringify({\n          request_token: requestToken\n        })\n      })).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n    const rating = await (await fetch(endpoint, { ...defaultConfig,\n      body: JSON.stringify({\n        value\n      })\n    })).json();\n    return rating;\n  }\n};\nexport default apiSettings;","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/API.js"],"names":["SEARCH_BASE_URL","POPULAR_BASE_URL","API_URL","API_KEY","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","endpoint","response","fetch","data","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating"],"mappings":"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","sourcesContent":["import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from \"./config\";\n\nconst defaultConfig = {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    // return await (await fetch(endpoint)).json();\n    const response = await fetch(endpoint);\n    const data = await response.json();\n    return data;\n  },\n  fetchMovie: async (movieId) => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async (movieId) => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value }),\n      })\n    ).json();\n\n    return rating;\n  },\n};\n\nexport default apiSettings;\n"]},"metadata":{},"sourceType":"module"}