{"ast":null,"code":"var _s = $RefreshSig$();\n\n// API\nimport API from \"../API\"; // Hook\n\nimport { useState, useEffect } from \"react\";\nexport const usePersonFetch = personId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(personId);\n        const credits = await API.fetchCredits(personId); // Get directors only\n\n        const directors = credits.crew.filter(member => member.job === \"Director\");\n        setState({ ...movie,\n          actors: credits.cast,\n          directors\n        });\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [personId]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(usePersonFetch, \"H9fMDtHieNoIS0cJiyLVriXyWm0=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/hooks/usePersonFetch.js"],"names":["API","useState","useEffect","usePersonFetch","personId","state","setState","loading","setLoading","error","setError","fetchData","movie","fetchMovie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAc;AAAA;;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,cAAME,KAAK,GAAG,MAAMZ,GAAG,CAACa,UAAJ,CAAeT,QAAf,CAApB;AACA,cAAMU,OAAO,GAAG,MAAMd,GAAG,CAACe,YAAJ,CAAiBX,QAAjB,CAAtB,CAJE,CAKF;;AACA,cAAMY,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACfC,MAAD,IAAYA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAGAd,QAAAA,QAAQ,CAAC,EAAE,GAAGM,KAAL;AAAYS,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAA5B;AAAkCN,UAAAA;AAAlC,SAAD,CAAR;AACD,OAVD,CAUE,OAAOP,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAfD;;AAgBAG,IAAAA,SAAS;AACV,GAlBQ,EAkBN,CAACP,QAAD,CAlBM,CAAT;AAoBA,SAAO;AAAEC,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACD,CA1BM;;GAAMN,c","sourcesContent":["// API\nimport API from \"../API\";\n// Hook\nimport { useState, useEffect } from \"react\";\n\nexport const usePersonFetch = (personId) => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(personId);\n        const credits = await API.fetchCredits(personId);\n        // Get directors only\n        const directors = credits.crew.filter(\n          (member) => member.job === \"Director\"\n        );\n        setState({ ...movie, actors: credits.cast, directors });\n      } catch (error) {\n        setError(true);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, [personId]);\n\n  return { state, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}