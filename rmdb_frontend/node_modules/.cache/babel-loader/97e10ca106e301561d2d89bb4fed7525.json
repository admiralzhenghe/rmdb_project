{"ast":null,"code":"var _s = $RefreshSig$();\n\n// API\nimport API from \"../API\"; // Hook\n\nimport { useState, useEffect } from \"react\";\nexport const usePersonFetch = personId => {\n  _s();\n\n  const [person, setPerson] = useState({});\n  const [credits, setCredits] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(false); // Fetch the person's bio\n\n        const person = await API.fetchPerson(personId); // Fetch the person's movie credits\n\n        const credits = await API.fetchPersonCredits(personId);\n        const actor = credits.cast;\n        const director = credits.crew.filter(movie => movie.job === \"Director\");\n        const producer = credits.crew.filter(movie => movie.job === \"Producer\");\n        const writer = credits.crew.filter(movie => movie.job === \"Writer\");\n        setPerson({ ...person\n        });\n        setCredits({\n          actor,\n          director,\n          producer,\n          writer\n        });\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [personId]);\n  return [person, credits, loading, error];\n};\n\n_s(usePersonFetch, \"k8nRx3f0vp6v/v4FP7enc07t2j0=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb_project/rmdb_frontend/src/hooks/usePersonFetch.js"],"names":["API","useState","useEffect","usePersonFetch","personId","person","setPerson","credits","setCredits","loading","setLoading","error","setError","fetchData","fetchPerson","fetchPersonCredits","actor","cast","director","crew","filter","movie","job","producer","writer"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAc;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR,CAFE,CAIF;;AACA,cAAMP,MAAM,GAAG,MAAML,GAAG,CAACc,WAAJ,CAAgBV,QAAhB,CAArB,CALE,CAMF;;AACA,cAAMG,OAAO,GAAG,MAAMP,GAAG,CAACe,kBAAJ,CAAuBX,QAAvB,CAAtB;AACA,cAAMY,KAAK,GAAGT,OAAO,CAACU,IAAtB;AACA,cAAMC,QAAQ,GAAGX,OAAO,CAACY,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAMC,QAAQ,GAAGhB,OAAO,CAACY,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAME,MAAM,GAAGjB,OAAO,CAACY,IAAR,CAAaC,MAAb,CAAqBC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,QAA7C,CAAf;AAEAhB,QAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,SAAD,CAAT;AACAG,QAAAA,UAAU,CAAC;AAAEQ,UAAAA,KAAF;AAASE,UAAAA,QAAT;AAAmBK,UAAAA,QAAnB;AAA6BC,UAAAA;AAA7B,SAAD,CAAV;AACD,OAnBD,CAmBE,OAAOb,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OArBD,SAqBU;AACRF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAzBD;;AA0BAG,IAAAA,SAAS;AACV,GA5BQ,EA4BN,CAACT,QAAD,CA5BM,CAAT;AA8BA,SAAO,CAACC,MAAD,EAASE,OAAT,EAAkBE,OAAlB,EAA2BE,KAA3B,CAAP;AACD,CApCM;;GAAMR,c","sourcesContent":["// API\nimport API from \"../API\";\n// Hook\nimport { useState, useEffect } from \"react\";\n\nexport const usePersonFetch = (personId) => {\n  const [person, setPerson] = useState({});\n  const [credits, setCredits] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n\n        // Fetch the person's bio\n        const person = await API.fetchPerson(personId);\n        // Fetch the person's movie credits\n        const credits = await API.fetchPersonCredits(personId);\n        const actor = credits.cast;\n        const director = credits.crew.filter(\n          (movie) => movie.job === \"Director\"\n        );\n        const producer = credits.crew.filter(\n          (movie) => movie.job === \"Producer\"\n        );\n        const writer = credits.crew.filter((movie) => movie.job === \"Writer\");\n\n        setPerson({ ...person });\n        setCredits({ actor, director, producer, writer });\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [personId]);\n\n  return [person, credits, loading, error];\n};\n"]},"metadata":{},"sourceType":"module"}