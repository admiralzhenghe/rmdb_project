{"ast":null,"code":"var _s = $RefreshSig$();\n\n// API\nimport API from \"../API\"; // Hook\n\nimport { useState, useEffect } from \"react\";\nexport const usePersonCreditsFetch = personId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  console.log(\"not fetching personcredits yet\");\n  console.log(state, \"next swagggg\");\n  useEffect(() => {\n    console.log(\"fetching personcredits!!!\");\n\n    const fetchData = async () => {\n      try {\n        setError(false);\n        console.log(\"error false\");\n        setLoading(true);\n        console.log(\"load true\");\n        console.log(\"load true2\");\n        console.log(\"load true3\");\n        const credits = await API.fetchPersonCredits(personId);\n        console.log(\"load true4\");\n        console.log(\"credits fetched\");\n        const actor = credits.cast;\n        const director = credits.crew.filter(movie => movie.job === \"Director\");\n        const producer = credits.crew.filter(movie => movie.job === \"Producer\");\n        const writer = credits.crew.filter(movie => movie.job === \"Writer\");\n        console.log(\"state updated\");\n        setState({\n          actor,\n          director,\n          producer,\n          writer\n        });\n        console.log(state, \"ldjafksdlasdlf\");\n      } catch {\n        console.log(\"error\");\n        setError(true);\n      }\n\n      console.log(\"load false\");\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [personId]);\n  console.log(\"returning from person credits fetch\", loading, state);\n  return {\n    state,\n    error,\n    loading\n  };\n};\n\n_s(usePersonCreditsFetch, \"H9fMDtHieNoIS0cJiyLVriXyWm0=\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/hooks/usePersonCreditsFetch.js"],"names":["API","useState","useEffect","usePersonCreditsFetch","personId","state","setState","loading","setLoading","error","setError","console","log","fetchData","credits","fetchPersonCredits","actor","cast","director","crew","filter","movie","job","producer","writer"],"mappings":";;AAAA;AACA,OAAOA,GAAP,MAAgB,QAAhB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,QAAD,IAAc;AAAA;;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmB,cAAnB;AACAH,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,UAAI;AACFH,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAJ,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,cAAME,OAAO,GAAG,MAAMd,GAAG,CAACe,kBAAJ,CAAuBX,QAAvB,CAAtB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,cAAMI,KAAK,GAAGF,OAAO,CAACG,IAAtB;AACA,cAAMC,QAAQ,GAAGJ,OAAO,CAACK,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAMC,QAAQ,GAAGT,OAAO,CAACK,IAAR,CAAaC,MAAb,CACdC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,UADV,CAAjB;AAGA,cAAME,MAAM,GAAGV,OAAO,CAACK,IAAR,CAAaC,MAAb,CAAqBC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAc,QAA7C,CAAf;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAN,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,KAAF;AAASE,UAAAA,QAAT;AAAmBK,UAAAA,QAAnB;AAA6BC,UAAAA;AAA7B,SAAD,CAAR;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmB,gBAAnB;AACD,OArBD,CAqBE,MAAM;AACNM,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KA5BD;;AA6BAK,IAAAA,SAAS;AACV,GAhCQ,EAgCN,CAACT,QAAD,CAhCM,CAAT;AAiCAO,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDL,OAAnD,EAA4DF,KAA5D;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASI,IAAAA,KAAT;AAAgBF,IAAAA;AAAhB,GAAP;AACD,CAzCM;;GAAMJ,qB","sourcesContent":["// API\nimport API from \"../API\";\n// Hook\nimport { useState, useEffect } from \"react\";\n\nexport const usePersonCreditsFetch = (personId) => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  console.log(\"not fetching personcredits yet\");\n  console.log(state, \"next swagggg\");\n  useEffect(() => {\n    console.log(\"fetching personcredits!!!\");\n    const fetchData = async () => {\n      try {\n        setError(false);\n        console.log(\"error false\");\n        setLoading(true);\n        console.log(\"load true\");\n        console.log(\"load true2\");\n        console.log(\"load true3\");\n        const credits = await API.fetchPersonCredits(personId);\n        console.log(\"load true4\");\n        console.log(\"credits fetched\");\n        const actor = credits.cast;\n        const director = credits.crew.filter(\n          (movie) => movie.job === \"Director\"\n        );\n        const producer = credits.crew.filter(\n          (movie) => movie.job === \"Producer\"\n        );\n        const writer = credits.crew.filter((movie) => movie.job === \"Writer\");\n        console.log(\"state updated\");\n        setState({ actor, director, producer, writer });\n        console.log(state, \"ldjafksdlasdlf\");\n      } catch {\n        console.log(\"error\");\n        setError(true);\n      }\n      console.log(\"load false\");\n      setLoading(false);\n    };\n    fetchData();\n  }, [personId]);\n  console.log(\"returning from person credits fetch\", loading, state);\n  return { state, error, loading };\n};\n"]},"metadata":{},"sourceType":"module"}