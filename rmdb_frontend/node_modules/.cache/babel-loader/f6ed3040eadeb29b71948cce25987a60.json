{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/rmdb/src/components/Movie.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // Component\n\nimport Actor from \"./Actor\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport Grid from \"./Grid\";\nimport MovieInfo from \"./MovieInfo\";\nimport Spinner from \"./Spinner\"; // Config\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\"; // Hook\n\nimport { useMovieFetch } from \"../hooks/useMovieFetch\"; // Image\n\nimport NoImage from \"../images/no_image.jpg\"; // Router\n\nimport { useParams } from \"react-router-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movie = () => {\n  _s();\n\n  const {\n    movieId\n  } = useParams();\n  const {\n    state: movie,\n    loading,\n    error\n  } = useMovieFetch(movieId);\n  console.log(movie);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\\"Error!\\\"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n      movieTitle: movie.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), !loading && /*#__PURE__*/_jsxDEV(MovieInfo, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 20\n    }, this), !loading && /*#__PURE__*/_jsxDEV(Grid, {\n      title: \"Cast\",\n      children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(Actor, {\n        character: actor.character,\n        id: actor.id,\n        name: actor.name,\n        imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n      }, actor.credit_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movie, \"MFvN9GJ3GVLfd55hOP/zB0RDH6Y=\", false, function () {\n  return [useParams, useMovieFetch];\n});\n\n_c = Movie;\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/components/Movie.js"],"names":["React","Actor","BreadCrumb","Grid","MovieInfo","Spinner","IMAGE_BASE_URL","POSTER_SIZE","useMovieFetch","NoImage","useParams","act","Movie","movieId","state","movie","loading","error","console","log","title","actors","map","actor","character","id","name","profile_path","credit_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,WAA5C,C,CACA;;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,QAAoB,sBAApB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAcH,SAAS,EAA7B;AACA,QAAM;AAAEI,IAAAA,KAAK,EAAEC,KAAT;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAmCT,aAAa,CAACK,OAAD,CAAtD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEA,MAAIC,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEF,KAAK,CAACK;AAA9B;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAACJ,OAAD,iBAAY,QAAC,SAAD;AAAW,MAAA,KAAK,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFf,EAGG,CAACC,OAAD,iBACC,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,MAAZ;AAAA,gBACGD,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAkBC,KAAD,iBAChB,QAAC,KAAD;AAEE,QAAA,SAAS,EAAEA,KAAK,CAACC,SAFnB;AAGE,QAAA,EAAE,EAAED,KAAK,CAACE,EAHZ;AAIE,QAAA,IAAI,EAAEF,KAAK,CAACG,IAJd;AAKE,QAAA,QAAQ,EACNH,KAAK,CAACI,YAAN,GACK,GAAErB,cAAe,GAAEC,WAAY,GAAEgB,KAAK,CAACI,YAAa,EADzD,GAEIlB;AARR,SACOc,KAAK,CAACK,SADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADF;AAuBD,CA/BD;;GAAMhB,K;UACgBF,S,EACqBF,a;;;KAFrCI,K;AAiCN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n// Component\nimport Actor from \"./Actor\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport Grid from \"./Grid\";\nimport MovieInfo from \"./MovieInfo\";\nimport Spinner from \"./Spinner\";\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\n// Hook\nimport { useMovieFetch } from \"../hooks/useMovieFetch\";\n// Image\nimport NoImage from \"../images/no_image.jpg\";\n// Router\nimport { useParams } from \"react-router-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nconst Movie = () => {\n  const { movieId } = useParams();\n  const { state: movie, loading, error } = useMovieFetch(movieId);\n  console.log(movie);\n\n  if (loading) return <Spinner />;\n  if (error) return <div>\"Error!\"</div>;\n\n  return (\n    <>\n      <BreadCrumb movieTitle={movie.title}></BreadCrumb>\n      {!loading && <MovieInfo movie={movie} />}\n      {!loading && (\n        <Grid title=\"Cast\">\n          {movie.actors.map((actor) => (\n            <Actor\n              key={actor.credit_id}\n              character={actor.character}\n              id={actor.id}\n              name={actor.name}\n              imageUrl={\n                actor.profile_path\n                  ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                  : NoImage\n              }\n            />\n          ))}\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default Movie;\n"]},"metadata":{},"sourceType":"module"}