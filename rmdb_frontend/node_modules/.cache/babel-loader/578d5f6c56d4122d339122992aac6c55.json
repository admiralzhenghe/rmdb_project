{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // Component\n\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Credits = ({\n  personId\n}) => {\n  _s();\n\n  const {\n    state: credits,\n    error,\n    loading\n  } = usePersonCreditsFetch(personId);\n  const [showing, setShowing] = useState();\n  let jobs;\n\n  if (!loading && credits) {\n    let keys = Object.keys(credits); // Only show select options for previously held jobs\n\n    jobs = keys.filter(key => credits[key].length > 0);\n  }\n\n  const handleSelect = job => {\n    setShowing(job);\n    console.log(showing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: /*#__PURE__*/_jsxDEV(Content, {\n        children: [!loading && /*#__PURE__*/_jsxDEV(Dropdown, {\n          credits: credits,\n          jobs: jobs,\n          handleSelect: handleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), showing && /*#__PURE__*/_jsxDEV(CreditsGrid, {\n          showing: credits[showing]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Credits, \"Q1BYMRksIPN0X1jBv1xzjRCdGiE=\", false, function () {\n  return [usePersonCreditsFetch];\n});\n\n_c = Credits;\nexport default Credits;\n\nvar _c;\n\n$RefreshReg$(_c, \"Credits\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js"],"names":["React","CreditsGrid","Content","Wrapper","usePersonCreditsFetch","useState","Dropdown","Credits","personId","state","credits","error","loading","showing","setShowing","jobs","keys","Object","filter","key","length","handleSelect","job","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,iBAAjC;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,KAAK,EAAEC,OAAT;AAAkBC,IAAAA,KAAlB;AAAyBC,IAAAA;AAAzB,MAAqCR,qBAAqB,CAACI,QAAD,CAAhE;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AACA,MAAIU,IAAJ;;AAEA,MAAI,CAACH,OAAD,IAAYF,OAAhB,EAAyB;AACvB,QAAIM,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYN,OAAZ,CAAX,CADuB,CAEvB;;AACAK,IAAAA,IAAI,GAAGC,IAAI,CAACE,MAAL,CAAaC,GAAD,IAAST,OAAO,CAACS,GAAD,CAAP,CAAaC,MAAb,GAAsB,CAA3C,CAAP;AACD;;AAED,QAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5BR,IAAAA,UAAU,CAACQ,GAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACD,GAHD;;AAKA,sBACE;AAAA,2BACE,QAAC,OAAD;AAAA,6BACE,QAAC,OAAD;AAAA,mBACG,CAACD,OAAD,iBACC,QAAC,QAAD;AACE,UAAA,OAAO,EAAEF,OADX;AAEE,UAAA,IAAI,EAAEK,IAFR;AAGE,UAAA,YAAY,EAAEM;AAHhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAQGR,OAAO,iBAAI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAEH,OAAO,CAACG,OAAD;AAA7B;AAAA;AAAA;AAAA;AAAA,gBARd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD,CAhCD;;GAAMN,O;UACuCH,qB;;;KADvCG,O;AAkCN,eAAeA,OAAf","sourcesContent":["import React from \"react\";\n// Component\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\n\nconst Credits = ({ personId }) => {\n  const { state: credits, error, loading } = usePersonCreditsFetch(personId);\n  const [showing, setShowing] = useState();\n  let jobs;\n\n  if (!loading && credits) {\n    let keys = Object.keys(credits);\n    // Only show select options for previously held jobs\n    jobs = keys.filter((key) => credits[key].length > 0);\n  }\n\n  const handleSelect = (job) => {\n    setShowing(job);\n    console.log(showing);\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <Content>\n          {!loading && (\n            <Dropdown\n              credits={credits}\n              jobs={jobs}\n              handleSelect={handleSelect}\n            ></Dropdown>\n          )}\n          {showing && <CreditsGrid showing={credits[showing]} />}\n        </Content>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Credits;\n"]},"metadata":{},"sourceType":"module"}