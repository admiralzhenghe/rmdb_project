{"ast":null,"code":"var _jsxFileName = \"/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\"; // Component\n\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\nimport Spinner from \"../Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Credits = ({\n  person\n}) => {\n  _s();\n\n  console.log(\"here in credits\");\n  const {\n    state: credits,\n    loading\n  } = usePersonCreditsFetch(person.id);\n  const [showing, setShowing] = useState();\n  console.log(loading, \"credits\");\n  let keys = Object.keys(credits); // Only show select options for previously held jobs\n\n  let jobs = keys.filter(key => credits[key].length > 0); // Sort jobs by the most number of credits\n\n  jobs = jobs.sort((a, b) => credits[b].length - credits[a].length);\n\n  const handleSelect = job => {\n    console.log(`set ${job}`);\n    setShowing(job);\n  };\n\n  useEffect(() => {\n    console.log(jobs, \"dropdown useeffect\");\n    handleSelect(jobs[0]);\n  }, []);\n\n  if (loading || !Object.keys(credits).length) {\n    console.log(\"still loading\", jobs);\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-type\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"FILMS\", \" \", showing === \"actor\" ? \"STARRING\" : showing === \"director\" ? \"DIRECTED BY\" : showing === \"producer\" ? \"PRODUCED BY\" : \"WRITTEN BY\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"name\",\n          children: person.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n        credits: credits,\n        jobs: jobs,\n        handleSelect: handleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), showing && /*#__PURE__*/_jsxDEV(CreditsGrid, {\n        showing: credits[showing]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Credits, \"TgvW1Hdv8GGwglQXTvP8l5UJZOk=\", false, function () {\n  return [usePersonCreditsFetch];\n});\n\n_c = Credits;\nexport default Credits;\n\nvar _c;\n\n$RefreshReg$(_c, \"Credits\");","map":{"version":3,"sources":["/Users/pgmp/Desktop/rmdb/src/components/Credits/index.js"],"names":["React","useEffect","CreditsGrid","Content","Wrapper","usePersonCreditsFetch","useState","Dropdown","Spinner","Credits","person","console","log","state","credits","loading","id","showing","setShowing","keys","Object","jobs","filter","key","length","sort","a","b","handleSelect","job","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\n// Component\nimport CreditsGrid from \"../CreditsGrid\";\nimport { Content, Wrapper } from \"./Credits.style\";\nimport { usePersonCreditsFetch } from \"../../hooks/usePersonCreditsFetch\";\nimport { useState } from \"react/cjs/react.development\";\nimport Dropdown from \"../Dropdown\";\nimport Spinner from \"../Spinner\";\n\nconst Credits = ({ person }) => {\n  console.log(\"here in credits\");\n  const { state: credits, loading } = usePersonCreditsFetch(person.id);\n  const [showing, setShowing] = useState();\n  console.log(loading, \"credits\");\n  let keys = Object.keys(credits);\n  // Only show select options for previously held jobs\n  let jobs = keys.filter((key) => credits[key].length > 0);\n  // Sort jobs by the most number of credits\n  jobs = jobs.sort((a, b) => credits[b].length - credits[a].length);\n\n  const handleSelect = (job) => {\n    console.log(`set ${job}`);\n    setShowing(job);\n  };\n\n  useEffect(() => {\n    console.log(jobs, \"dropdown useeffect\");\n    handleSelect(jobs[0]);\n  }, []);\n\n  if (loading || !Object.keys(credits).length) {\n    console.log(\"still loading\", jobs);\n    return <Spinner />;\n  }\n\n  return (\n    <Wrapper>\n      <Content>\n        <div className=\"job-type\">\n          <div>\n            FILMS{\" \"}\n            {showing === \"actor\"\n              ? \"STARRING\"\n              : showing === \"director\"\n              ? \"DIRECTED BY\"\n              : showing === \"producer\"\n              ? \"PRODUCED BY\"\n              : \"WRITTEN BY\"}\n          </div>\n          <div className=\"name\">{person.name}</div>\n        </div>\n        <Dropdown credits={credits} jobs={jobs} handleSelect={handleSelect} />\n        {showing && <CreditsGrid showing={credits[showing]} />}\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Credits;\n"]},"metadata":{},"sourceType":"module"}